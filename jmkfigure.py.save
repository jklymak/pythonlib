#!/usr/local/bin/python
# Filename: jmkfigure.py

# from matplotlib import rc
from pylab import *

def djmkfigure(width,vext):
    """
    djmkfigure(width,vext):
    width is column widths, and vext is fractional 10 page height.  
    """
    wid = 3*width+3./8.;
    height = 10*vext;
    rc('figure',figsize=(wid,height),dpi=96)
    rc('font',size=9)
    rc('font',family='sans-serif');
    # rcParams['font.sans-serif'] = ['Verdana']
    rc('axes',labelsize='large') 
    leftin = 0.75
    rightin = 0.25
    botin = 0.4
    rc('figure.subplot',left=leftin/wid) 
    rc('figure.subplot',right=(1-rightin/wid)) 
    rc('figure.subplot',bottom=botin/height) 

def jmkprint(fname,pyname):
    """
    def jmkprint(fname,pyname)
    """
    import os
    
    try:
        os.mkdir('doc')
    except:
        pass

    
    pwd=os.getcwd()
    savefig('doc/'+fname+'.pdf',dpi=400)
    savefig('doc/'+fname+'.png',dpi=400)
    
    fout = open('doc/'+fname+'.tex','w')
    str="""\\begin{{figure*}}[htbp]
  \\begin{{center}}
    \\includegraphics[width=\\twowidth]{{{fname}}}
    \\caption{{
      \\tempS{{\\footnotesize {pwd}/{pyname} ;     
        {pwd}/doc/{fname}.pdf}}
      \\label{{fig:{fname}}} }}
  \\end{{center}}
\\end{{figure*}}""".format(pwd=pwd,pyname=pyname,fname=fname)
    fout.write(str)
    fout.close()
    
    cmd = 'less doc/%s.tex | pbcopy' % fname
    os.system(cmd) 



    
    
# cpt_reader
# Read cpt palette and returns a segmented color dictionary for use in matplotlib
# David Huard, February 2006
# [hidden email]

from scipy.io import read_array
from scipy import zeros, linspace, shape, Float, concatenate


def cpt2seg(file_name, sym=False, discrete=False):
    """Reads a .cpt palette and returns a segmented colormap.

    sym : If True, the returned colormap contains the palette and a mirrored copy.
    For example, a blue-red-green palette would return a blue-red-green-green-red-blue colormap.

    discrete : If true, the returned colormap has a fixed number of uniform colors.
    That is, colors are not interpolated to form a continuous range. 

    Example :
    >>> _palette_data = cpt2seg('palette.cpt')
    >>> palette = matplotlib.colors.LinearSegmentedColormap('palette', _palette_data, 100)
    >>> imshow(X, cmap=palette)
    """
    
    
    dic = {}
    f = open(file_name, 'r')
    rgb = read_array(f)
    rgb = rgb/255.
    s = shape(rgb)
    colors = ['red', 'green', 'blue']
    for c in colors:
        i = colors.index(c)
        x = rgb[:, i+1]

        if discrete:
            if sym:
                dic[c] = zeros((2*s[0]+1, 3), dtype=Float)
                dic[c][:,0] = linspace(0,1,2*s[0]+1)
                vec = concatenate((x ,x[::-1]))
            else:
                dic[c] = zeros((s[0]+1, 3), dtype=Float)
                dic[c][:,0] = linspace(0,1,s[0]+1)
                vec = x
            dic[c][1:, 1] = vec
            dic[c][:-1,2] = vec
                
        else:
            if sym:
                dic[c] = zeros((2*s[0], 3), dtype=Float)
                dic[c][:,0] = linspace(0,1,2*s[0])
                vec = concatenate((x ,x[::-1]))
            else:
                dic[c] = zeros((s[0], 3), dtype=Float)
                dic[c][:,0] = linspace(0,1,s[0])
                vec = x
            dic[c][:, 1] = vec
            dic[c][:, 2] = vec
    
    return dic

